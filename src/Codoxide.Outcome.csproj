<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Authors>Sameera Perera</Authors>
    <Product>Outcome&lt;T&gt;</Product>
    <Version>4.3.5</Version>
    <PackageId>Codoxide.Outcome</PackageId>
    <AssemblyName>Codoxide.Outcome</AssemblyName>
    <RepositoryUrl>https://github.com/sameera/Codoxide.Outcome</RepositoryUrl>
    <RepositoryType>Git</RepositoryType>
    <PackageTags>either monad, c#, chaining, result, functional, try</PackageTags>
    <Description>"Either" Monad-like Implementation for dealing with operation results in C#</Description>
    <Copyright>Sameera Perera</Copyright>
    <PackageLicenseUrl>https://github.com/sameera/Codoxide.Outcome/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/sameera/Codoxide.Outcome</PackageProjectUrl>
    <PackageReleaseNotes>[4.0] (Has breaking changes)
- ThenIf is now just Then (with predicates) and allows for both true and false handlers.
- Allow Catch to return different outcomes.
- Can specify failure code when failing.
- Continue(..)
- Allow Catch to return a differently typed outcome

4.1.0
ThenForEach(..) Extension method for processing Outcomes that are composed of multiple results

4.2.0
Fixed a bug in the catch handlers (A catch handler will force an outcome to fail)

4.3.0
Outcome.Any()

4.3.x
- Conditionals support async actions
- Removed Ambiguous Catch handlers
- Task&lt;Outcome&lt;T&gt;&gt; unwrapping improvements
- ThenForEach(..) for async operations.</PackageReleaseNotes>
    <RootNamespace>Codoxide</RootNamespace>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="2.9.0" />
  </ItemGroup>

</Project>
