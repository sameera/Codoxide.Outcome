pool:
  vmImage: 'ubuntu-latest'

steps:

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(Build.DefinitionName)/**/*.csproj'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Codoxide@SonarCloud'
    organization: 'codoxide'
    scannerMode: 'MSBuild'
    projectKey: 'outcome'
    projectName: 'Outcome'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(Build.DefinitionName)/**/*.csproj'
    arguments: '--configuration Release'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(Build.DefinitionName)/*[Tt]ests/*.csproj'
    arguments: '--configuration Release'

- task: SonarCloudAnalyze@1
  enabled: false
- task: SonarCloudPublish@1
  enabled: false
  inputs:
    pollingTimeoutSec: '300'


- task: PowerShell@2
  displayName: 'Get Version'
  inputs:
    targetType: 'inline'
    script: |
      $proj = "$(Build.DefinitionName)"
      $xml = [Xml] (Get-Content $proj/src/$proj.csproj)
      $version = [Version] $xml.Project.PropertyGroup.Version
      $qualifier = $proj.Substring($proj.LastIndexOf(".") + 1)
      $tag = "$qualifier/$version"
      Write-Host "Target Tag: $tag"
      Write-Host "##vso[task.setvariable variable=GitTag]$tag"
      $tagCommit = (git rev-parse -q --verify "refs/tags/$tag")
      $hasTag = $tagCommit.Length
      Write-Host "##vso[task.setvariable variable=IsTagged]$hasTag"
      Write-Host "Is Tagged: $hasTag"
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    
- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: push
    feedsToUse: config
    externalFeedCredentials: 'NuGet.org PAT'
    packagesToPush: '$(Build.SourcesDirectory)/$(Build.DefinitionName)/**/*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'NuGet.org PAT'
  condition: and(succeeded(), eq(variables['IsTagged'], '0'))

- script: |
    git config --global user.email "$(AuthorEmail)"
    git config --global user.name "$(AuthorName)"
    git tag -a $(Qualifier)/v$(Version) -m "$(Build.DefinitionName) Release v$(Version)"
    git push origin $(Qualifier)/v$(Version)
  displayName: "Tag Repo"
  condition: and(succeeded(), eq(variables['IsTagged'], '0'))

